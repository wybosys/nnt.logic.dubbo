# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dao_pb2 as dao__pb2
from dubbo import test_pb2 as dubbo_dot_test__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


class TestStub(object):
    """测试hello的协议
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.hello = channel.unary_unary(
                '/com.test.dubbo.Test/hello',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dubbo_dot_test__pb2.TestReply.FromString,
                )
        self.echo = channel.unary_unary(
                '/com.test.dubbo.Test/echo',
                request_serializer=dubbo_dot_test__pb2.ReqTestEcho.SerializeToString,
                response_deserializer=dubbo_dot_test__pb2.RspTestEcho.FromString,
                )
        self.echoo = channel.unary_unary(
                '/com.test.dubbo.Test/echoo',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=dao__pb2.Echoo.FromString,
                )
        self.echoos = channel.unary_unary(
                '/com.test.dubbo.Test/echoos',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dao__pb2.Echoos.FromString,
                )
        self.echooclear = channel.unary_unary(
                '/com.test.dubbo.Test/echooclear',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
                )
        self.echooupdate = channel.unary_unary(
                '/com.test.dubbo.Test/echooupdate',
                request_serializer=dao__pb2.Echoo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.error = channel.unary_unary(
                '/com.test.dubbo.Test/error',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class TestServicer(object):
    """测试hello的协议
    """

    def hello(self, request, context):
        """返回欢迎
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echo(self, request, context):
        """普通测试echo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echoo(self, request, context):
        """数据库添加一个echoo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echoos(self, request, context):
        """列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echooclear(self, request, context):
        """清空echoo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echooupdate(self, request, context):
        """更新
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def error(self, request, context):
        """测试返回失败
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'hello': grpc.unary_unary_rpc_method_handler(
                    servicer.hello,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dubbo_dot_test__pb2.TestReply.SerializeToString,
            ),
            'echo': grpc.unary_unary_rpc_method_handler(
                    servicer.echo,
                    request_deserializer=dubbo_dot_test__pb2.ReqTestEcho.FromString,
                    response_serializer=dubbo_dot_test__pb2.RspTestEcho.SerializeToString,
            ),
            'echoo': grpc.unary_unary_rpc_method_handler(
                    servicer.echoo,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=dao__pb2.Echoo.SerializeToString,
            ),
            'echoos': grpc.unary_unary_rpc_method_handler(
                    servicer.echoos,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dao__pb2.Echoos.SerializeToString,
            ),
            'echooclear': grpc.unary_unary_rpc_method_handler(
                    servicer.echooclear,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
            ),
            'echooupdate': grpc.unary_unary_rpc_method_handler(
                    servicer.echooupdate,
                    request_deserializer=dao__pb2.Echoo.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'error': grpc.unary_unary_rpc_method_handler(
                    servicer.error,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.test.dubbo.Test', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Test(object):
    """测试hello的协议
    """

    @staticmethod
    def hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/hello',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dubbo_dot_test__pb2.TestReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/echo',
            dubbo_dot_test__pb2.ReqTestEcho.SerializeToString,
            dubbo_dot_test__pb2.RspTestEcho.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echoo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/echoo',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            dao__pb2.Echoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echoos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/echoos',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dao__pb2.Echoos.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echooclear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/echooclear',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echooupdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/echooupdate',
            dao__pb2.Echoo.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def error(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test/error',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Test1Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.echo = channel.unary_unary(
                '/com.test.dubbo.Test1/echo',
                request_serializer=dubbo_dot_test__pb2.ReqTestEcho.SerializeToString,
                response_deserializer=dubbo_dot_test__pb2.RspTestEcho.FromString,
                )


class Test1Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def echo(self, request, context):
        """普通测试echo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Test1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'echo': grpc.unary_unary_rpc_method_handler(
                    servicer.echo,
                    request_deserializer=dubbo_dot_test__pb2.ReqTestEcho.FromString,
                    response_serializer=dubbo_dot_test__pb2.RspTestEcho.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.test.dubbo.Test1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Test1(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.test.dubbo.Test1/echo',
            dubbo_dot_test__pb2.ReqTestEcho.SerializeToString,
            dubbo_dot_test__pb2.RspTestEcho.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
